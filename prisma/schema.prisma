// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DailyMonitoring {
  id            String   @id @default(uuid())
  userId        String
  date          DateTime @default(now())
  glucoseLevel  Float
  bloodPressure Float
  cholesterol   Float
  uricAcid      Float

  user UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, date]) // optional: hanya 1 input per hari per user
}

model UserProfile {
  userId String @id // didapat dari Stack Auth (misal dari getUserDetails)
  height Float
  weight Float

  meals          Meal[]
  dietTracking   DietTracking[]
  monitorings    DailyMonitoring[]
  UlcerDetection UlcerDetection[]
}

model DietTracking {
  id            String      @id @default(cuid())
  userId        String
  date          DateTime
  totalCalories Float       @default(0)
  totalCarbs    Float       @default(0)
  totalProtein  Float       @default(0)
  totalFat      Float       @default(0)
  meals         Meal[] // Relation to meals eaten on this day
  user          UserProfile @relation(fields: [userId], references: [userId])

  // Compound unique constraint to ensure one tracking per user per day
  @@unique([userId, date])
}

model Meal {
  id             String       @id @default(cuid())
  userId         String
  dietTrackingId String? // Optional because a meal can be created independently
  name           String
  category       MealCategory // Breakfast, Lunch, Dinner, Snack
  calories       Float
  carbs          Float // in grams
  protein        Float // in grams
  fat            Float // in grams
  date           DateTime // Date when this meal was added/eaten

  // Relations
  dietTracking DietTracking? @relation(fields: [dietTrackingId], references: [id])
  user         UserProfile   @relation(fields: [userId], references: [userId])
}

model FoodItem {
  id       String  @id @default(cuid())
  name     String
  category String?
  calories Float
  carbs    Float // in grams
  protein  Float // in grams
  fat      Float // in grams
  recipe   String? // How to prepare/cook this food item
}

enum MealCategory {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model UlcerDetection {
  id             String   @id @default(uuid())
  userId         String
  date           DateTime @default(now())
  ulcerpotential Level

  user UserProfile @relation(fields: [userId], references: [userId])
}

enum Level {
  Low
  High
}
